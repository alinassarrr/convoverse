name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev, new]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SERVER: ${{ github.repository }}/server
  IMAGE_NAME_CLIENT: ${{ github.repository }}/client

jobs:
  # Test Server
  test-server:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "server/package-lock.json"

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Run server linting
        working-directory: ./server
        run: npm run lint -- --quiet

      - name: Run server tests
        working-directory: ./server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/test?authSource=admin
          JWT_SECRET: test-secret
        run: npm run test

      - name: Run server e2e tests
        working-directory: ./server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password123@localhost:27017/test?authSource=admin
          JWT_SECRET: test-secret
        run: npm run test:e2e

  # Test Client
  test-client:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "client/package-lock.json"

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Run client linting
        working-directory: ./client
        run: npm run lint:errors

      - name: Run client tests
        working-directory: ./client
        run: npm test

      - name: Build client
        working-directory: ./client
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_API_URL: http://localhost:3000
        run: npm run build

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Audit server dependencies
        working-directory: ./server
        run: npm audit --audit-level moderate

      - name: Audit client dependencies
        working-directory: ./client
        run: npm audit --audit-level moderate

  # Build and Push Docker Images
  build-and-push:
    needs: [test-server, test-client, security-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
